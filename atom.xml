<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Timeszoro&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://Timeszoro.com/"/>
  <updated>2016-10-18T16:00:24.000Z</updated>
  <id>http://Timeszoro.com/</id>
  
  <author>
    <name>Guangjing Wang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>加速Android编译速度</title>
    <link href="http://Timeszoro.com/2015/11/25/%E5%8A%A0%E9%80%9Fandroid%E7%BC%96%E8%AF%91%E9%80%9F%E5%BA%A6/"/>
    <id>http://Timeszoro.com/2015/11/25/加速android编译速度/</id>
    <published>2015-11-24T16:00:00.000Z</published>
    <updated>2016-10-18T16:00:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>对于Android开发者而言，随着工程不断的壮大，Android项目的编译时间也逐渐变长，即便是有时候添加一行代码也需要等待好久才能看见期待的效果。之前加快Android编译的工具相对较少，其中最具有代表性的开源项目当属FaceBook的<a href="https://buckbuild.com/" title="Buck" target="_blank" rel="external">Buck</a>和 mmin18的<a href="https://github.com/mmin18/LayoutCast" target="_blank" rel="external">LayoutCast</a>，除此之外还有<a href="http://zeroturnaround.com/software/jrebel-for-android/" target="_blank" rel="external">JRebel</a> 和 <a href="http://jimulabs.com/" target="_blank" rel="external">Jimulabs</a>。不过前两天google宣布推出<a href="https://sites.google.com/a/android.com/tools/tech-docs/instant-run" target="_blank" rel="external">Instant Run</a>加快Android 编译速度，相信对其他的工具来说都是一次冲击，这也是写这篇文章的动机。</p>
<p>相对于Buck而言，LayoutCast显得更轻量一些，对项目的侵入性较弱。今年8月份的时候，花了一个星期左右的时间才完成公司的代码的适配，对于一些繁重的项目而言，Buck带来的好处是显而易见的，但是适配过程中的坑也是很多的。Instant Run 对项目的侵入性其实也是比较大的，但是这些都不需要用户去操作、配置，所以看起来和LayoutCast一样属于轻量型的。</p>
<h2 id="时间去哪了？"><a href="#时间去哪了？" class="headerlink" title="时间去哪了？"></a>时间去哪了？</h2><p>Android程序编译大致过程如图所示，详细的过程可以参考gradle 中的tasks。</p>
<div align="center"><br><img src="http://7u2thd.com1.z0.glb.clouddn.com/build_process.png" width="640" height="200" alt="编译过程"><br></div>

<p>那么为什么我们每次编译都需要等待那么久？事实上我们我们可以gradle中添加TaskExecutionListener来监听gradle脚本中每个task的<a href="http://stackoverflow.com/questions/13031538/track-execution-time-per-task-in-gradle-script" target="_blank" rel="external">执行时间</a>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TimingsListener</span> <span class="keyword">implements</span> <span class="title">TaskExecutionListener</span>, <span class="title">BuildListener</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Clock clock</div><div class="line">    <span class="keyword">private</span> timings = []</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">beforeExecute</span><span class="params">(Task task)</span> </span>&#123;</div><div class="line">        clock = <span class="keyword">new</span> org.gradle.util.Clock()</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">afterExecute</span><span class="params">(Task task, TaskState taskState)</span> </span>&#123;</div><div class="line">        def ms = clock.timeInMs</div><div class="line">        timings.add([ms, task.path])</div><div class="line">        task.project.logger.warn <span class="string">"$&#123;task.path&#125; took $&#123;ms&#125;ms"</span></div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildFinished</span><span class="params">(BuildResult result)</span> </span>&#123;</div><div class="line">        println <span class="string">"Task timings:"</span></div><div class="line">        <span class="keyword">for</span> (timing in timings) &#123;</div><div class="line">            <span class="keyword">if</span> (timing[<span class="number">0</span>] &gt;= <span class="number">50</span>) &#123;</div><div class="line">                printf <span class="string">"%7sms  %s\n"</span>, timing</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildStarted</span><span class="params">(Gradle gradle)</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">projectsEvaluated</span><span class="params">(Gradle gradle)</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">projectsLoaded</span><span class="params">(Gradle gradle)</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">settingsEvaluated</span><span class="params">(Settings settings)</span> </span>&#123;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">gradle.<span class="function">addListener new <span class="title">TimingsListener</span><span class="params">()</span></span></div></pre></td></tr></table></figure>
<p>执行脚本可以发现主要的费时在dex(包含preDex)以及install这两个步骤。BUCK和LayoutCast的主要工作也是集中于这些费时的步骤上面。</p>
<h2 id="如何加快？"><a href="#如何加快？" class="headerlink" title="如何加快？"></a>如何加快？</h2><p>开发过程中对项目的改动一般分为Java文件的修改以及资源文件的修改，这些修改都会涉及到上述的几个费时步骤，这也就是为什么即便我们修改一行代码也需要编译很久。</p>
<h3 id="1、Java文件修改"><a href="#1、Java文件修改" class="headerlink" title="1、Java文件修改"></a>1、Java文件修改</h3><p>通常，修改的.java文件会先经过javac操作生成.class文件。而后与其他的.class文件经过dx生成.dex文件。经过dx的操作很费时，针对这种情况，BUCK、LayoutCast和Instant Run采用了两种方法来解决。</p>
<h4 id="BUCK"><a href="#BUCK" class="headerlink" title="BUCK"></a>BUCK</h4><p>BUCK建立了一套完善的依赖规则以及细化的缓存系统来缩减编译时间，并通过使用三方的dex merege工具将.dex文件合并的时间复杂度从O(N^2)降到O(NlgN)。</p>
<div align="center"><br><img src="http://7u2thd.com1.z0.glb.clouddn.com/buck_dex.png" width="500" height="240" alt="Buck Dex 过程"><br></div>


<p>如图所示，当修改A.java文件时，只涉及到相应的dx操作以及dex merge操作（红色部分），这样就大大的缩减了dx的操作时间。BUCK在依赖规则上狠下功夫推出了ABI，更是进一步的减少了不必要的操作。</p>
<h4 id="LayoutCast"><a href="#LayoutCast" class="headerlink" title="LayoutCast"></a>LayoutCast</h4><p>LayoutCast的实现同很多插件的实现原理差不多，具体分析如下:</p>
<p>在ClassLoader查找类的时候会先去调用BaseDexClassLoader类中的findClass方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//----dalvik/system/BaseDexClassLoader.java  </span></div><div class="line"> <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</div><div class="line">        Class clazz = pathList.findClass(name);</div><div class="line">        <span class="keyword">if</span> (clazz == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException(name);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> clazz;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>随后在DexPathList类中根据dexElements来查找相应的class。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//----dalvik/system/DexPathList.java  </span></div><div class="line"><span class="function"><span class="keyword">public</span> Class <span class="title">findClass</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (Element element : dexElements) &#123;</div><div class="line">            DexFile dex = element.dexFile;</div><div class="line">            <span class="keyword">if</span> (dex != <span class="keyword">null</span>) &#123;</div><div class="line">                Class clazz = dex.loadClassBinaryName(name, definingContext);</div><div class="line">                <span class="keyword">if</span> (clazz != <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">return</span> clazz;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>其中dexElements代表着不同dex文件。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** list of dex/resource (class path) elements */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Element[] dexElements;</div></pre></td></tr></table></figure>
<p>也就是说，在ClassLoader加载类的时候会去按照dexElements中dex文件的顺序依次查找，如下图所示，在1.dex中查找到了A类，那么就不会再从后面的dex文件中继续查找了。</p>
<div align="center"><br><img src="http://7u2thd.com1.z0.glb.clouddn.com/insert_dex.png" width="500" height="200" alt="插入dex原理"><br></div>

<p>LayoutCast就是利用这样的原理，将修改的Java文件生成dex文件，并将此dex文件利用反射的方式插入到dexElements数组的前面。当然，从Java到dex的过程需要额外的查找各种依赖包之类的工作，这部分工作在cast.py中实现。</p>
<p>这种方式的实现在ART下是没有问题的，但是在Dalvik中就会出现IllegalAccessError的问题</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">java.lang.IllegalAccessError: Class ref in pre-verified class resolved to unexpected implementation</div><div class="line">dalvik.system.DexFile.defineClass(Native Method)</div><div class="line">dalvik.system.DexFile.loadClassBinaryName(DexFile.java:211)</div><div class="line">dalvik.system.DexPathList.findClass(DexPathList.java:315)</div><div class="line">dalvik.system.BaseDexClassLoader.findClass(BaseDexClassLoader.j</div></pre></td></tr></table></figure>
<p>具体的原因以及解决方案可以参考<a href="http://bugly.qq.com/blog/?p=781" target="_blank" rel="external">Bugly的文章</a></p>
<h4 id="Install-Run"><a href="#Install-Run" class="headerlink" title="Install Run"></a>Install Run</h4><p>Install Run 同样也是生成新的增量dex,但是新增dex中的类和原来的类名有区别。比如说，在修改Hello.java类之后，会生成包含Hello$overide类的dex文件。</p>
<p>那么，这个新增的dex文件中Hello$Override类是如何被调用的？</p>
<p>我们先看看原来的Hello.java文件经过Instant Run 编译前后的区别：</p>
<p>编译前的hello.java文件</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">(String str)</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> str;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>经过Instant Run之后的</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">---compiled  Hello.<span class="function">java</span></div><div class="line"><span class="keyword">public</span> String <span class="title">name</span><span class="params">(String str)</span> &#123;</div><div class="line">       IncrementalChange var2 = $change;</div><div class="line">       <span class="keyword">return</span> var2 != <span class="keyword">null</span>?(String)var2.access$dispatch(<span class="string">"name.(Ljava/lang/String;)Ljava/lang/String;"</span>, <span class="keyword">new</span> Object[]&#123;<span class="keyword">this</span>, str&#125;):str;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>可以看出，如果$change存在的话，就会调用$change中相应的函数，那么我们只需要通过反射将Hello.java中$change字段改为修改后的Hello$override的类就Ok了。<br>这也就是为什么Instant Run并不存在前面说到的IllegalAccessError的问题，并且支持不重启就能看见修改效果的原因。具体可以看看<a href="http://jiajixin.cn/2015/11/25/instant-run/" target="_blank" rel="external">寒江不钓的博客</a></p>
<h4 id="2、Res修改"><a href="#2、Res修改" class="headerlink" title="2、Res修改"></a>2、Res修改</h4><p>Resource文件的修改会涉及到AAPT、ApkBuilder以及最后的Install操作。其中APPT的操作要求比较高，LayoutCast、Instant Run均没有在这部分进行优化，他们的主要工作在于后面的两个操作。其主要的思路在于将修改的后的资源利用aapt打包成新的.ap_文件，并通过反射的方式将原来的资源文件改为修改后的。</p>
<h4 id="LayoutCast-1"><a href="#LayoutCast-1" class="headerlink" title="LayoutCast"></a>LayoutCast</h4><p>LayoutCast主要做了两件事。</p>
<p><strong>修改LayoutInflater服务</strong></p>
<p>对于下面的用法我们并不陌生：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">LayoutInflater layoutInflater = LayoutInflater.from(context);</div><div class="line">View view = layoutInflater.inflate(resourceId, root);</div></pre></td></tr></table></figure>
<p>其中LayoutInflater.from的实现是在Context的实现类ContextImp中获取<code>LAYOUT_INFLATER_SERVICE</code>系统服务</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//----  android/view/LayoutInflater.java</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LayoutInflater <span class="title">from</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">         LayoutInflater LayoutInflater =</div><div class="line">                 (LayoutInflater)context.getSystemService(Context.</div><div class="line">                 LAYOUT_INFLATER_SERVICE);</div><div class="line">         <span class="keyword">if</span> (LayoutInflater == <span class="keyword">null</span>) &#123;</div><div class="line">             <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError(<span class="string">"LayoutInflater not found."</span>);</div><div class="line">         &#125;</div><div class="line">         <span class="keyword">return</span> LayoutInflater;</div><div class="line">     &#125;</div></pre></td></tr></table></figure>
<p>那么ContextImpl又是如何获取相应的服务的，查看ContextImpl类可以发现，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//---- android/app/ContextImpl.java</span></div><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getSystemService</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        ServiceFetcher fetcher = SYSTEM_SERVICE_MAP.get(name);</div><div class="line">        <span class="keyword">return</span> fetcher == <span class="keyword">null</span> ? <span class="keyword">null</span> : fetcher.getService(<span class="keyword">this</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>可以发现调用getSystemService的过程是在<code>SYSTEM_SERVICE_MAP</code>的表中查找<code>ServiceFetcher</code>，并返回<code>ServiceFetcher</code>中的<code>mCachedInstance</code>。那么只需要将<code>mCachedInstance</code>替换为自定义的BootInflater并在BootInflater中完成Resource的Overrirde就可以了，如下图所示。</p>
<div align="center"><br><img src="http://7u2thd.com1.z0.glb.clouddn.com/static_service.png" width="500" height="240" alt="插入dex原理"><br></div>

<p><strong>修改Resource</strong></p>
<p>我们知道Activity中的通过调用<code>getResources()</code>方法来访问资源，这实际上是调用ContextWrapper类中的<code>getResource()</code>方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Resources <span class="title">getResources</span><span class="params">()</span></span>&#123;</div><div class="line">         <span class="keyword">return</span> mBase.getResources();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>LayoutCast中就采用替换mBase为自定义的OverrideContext，并在其中将Resource返回为修改后的Resource。</p>
<h4 id="Instant-Run"><a href="#Instant-Run" class="headerlink" title="Instant Run"></a>Instant Run</h4><p>Instant Run 对资源文件的处理和LayoutCast基本类似，但是在细节的处理上有所不同，比如Instant Run 通过对<code>ActivityThread</code>类中的<code>mPackages</code>和<code>mResourcePackages</code>的修改来改变<code>LoadedApk</code>中<code>mResDir</code>的值。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (String fieldName : <span class="keyword">new</span> String[] &#123; <span class="string">"mPackages"</span>, <span class="string">"mResourcePackages"</span> &#125;)</div><div class="line">&#123;</div><div class="line">  Field field = activityThread.getDeclaredField(fieldName);</div><div class="line">  field.setAccessible(<span class="keyword">true</span>);</div><div class="line">  Object value = field.get(currentActivityThread);</div><div class="line">  <span class="keyword">for</span> (Map.Entry&lt;String, WeakReference&lt;?&gt;&gt; entry : ((Map)value).entrySet())</div><div class="line">  &#123;</div><div class="line">    Object loadedApk = ((WeakReference)entry.getValue()).get();</div><div class="line">    <span class="keyword">if</span> (loadedApk != <span class="keyword">null</span>) &#123;</div><div class="line">      <span class="keyword">if</span> (mApplication.get(loadedApk) == bootstrap)</div><div class="line">      &#123;</div><div class="line">        <span class="keyword">if</span> (externalResourceFile != <span class="keyword">null</span>) &#123;</div><div class="line">          mResDir.set(loadedApk, externalResourceFile);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> ((realApplication != <span class="keyword">null</span>) &amp;&amp; (mLoadedApk != <span class="keyword">null</span>)) &#123;</div><div class="line">          mLoadedApk.set(realApplication, loadedApk);</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>资源文件修改的处理相对于Java文件的处理较为复杂，这中间涉及到aapt、attribute唯一性 、ID值一致等问题都增加了资源文件处理的难度。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总的来说，每种方法都有自己的特色，BUCK依赖于自己强大的缓存和依赖管理系统。而LayoutCast和Instant Run相对而言采用了更灵巧的方法。相对而言，Instant Run 凭借着天然的优势（和升级后的gradle结合），可以胜LayoutCast一筹，但是LayoutCast这种想法的提出还是很赞的。目前增量的编译集中在Java文件的修改，对于Res的修改暂时好像还不支持，这在后续应该会有提升吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于Android开发者而言，随着工程不断的壮大，Android项目的编译时间也逐渐变长，即便是有时候添加一行代码也需要等待好久才能看见期待的效果。之前加快Android编译的工具相对较少，其中最具有代表性的开源项目当属FaceBook的&lt;a href=&quot;https://b
    
    </summary>
    
      <category term="Android" scheme="http://Timeszoro.com/categories/Android/"/>
    
    
      <category term="编译加速" scheme="http://Timeszoro.com/tags/%E7%BC%96%E8%AF%91%E5%8A%A0%E9%80%9F/"/>
    
      <category term="BUCK" scheme="http://Timeszoro.com/tags/BUCK/"/>
    
      <category term="LayoutCast" scheme="http://Timeszoro.com/tags/LayoutCast/"/>
    
  </entry>
  
</feed>
